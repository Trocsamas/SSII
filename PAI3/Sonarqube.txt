APARTADO 1
===========================

Evaluación del Proyecto de Java-Maven 

Tras ejecutar un análisis del código sobre el proyecto de ejemplo facilitado, el reporte que ha facilitado la herramienta describe la situación del proyecto como muy peligrosa. Siguiendo la guía de conceptos de sonarqube (https://docs.sonarqube.org/latest/user-guide/concepts/), en un vistazo general el proyecto presenta 10 bugs (problemas que directamente rompen el código o lo romperán futuramente y que requieren atención inmediata), 10 vulnerabilidades críticas, 45 puntos clave de seguridad (código que es sensible a problemas de seguridad y que necesita revisión manual para revisar si resultan una amenaza y solucionarlo en caso de resultar crítico) y una deuda técnica (tiempo estimado para solucionar todos los problemas del proyecto) de 4 días y 6 horas

*sonarqube_snaps/snap1.png*

Un vistazo al apartado de "issues" muestra información más detallada sobre los problemas detectados por Sonarqube, indicando que existen 22 problemas de tipo blocker (problemas con un gran impacto y con gran posibilidad de ocurrir), 33 problemas críticos (gran impacto pero posibilidad de fallo baja), 118 problemas mayores y 108 problemas menores. 

*sonarqube_snaps/snap2.png*

Atendiendo los "Security Hotspots"(S.H de aquí en adelante), que resultarán ser nuestro principal interés dentro de todos los problemas del proyecto, encontramos que este contiene 29 S.H. susceptibles de exploits del tipo CSRF o falsificación de petición en sitios cruzados, 1 S.H. relacionado con inyecciones SQL y 3 S.H. relacionados con exploits XSS o secuencia de comandos en sitios cruzados. Adicionalmente, existen 12 S.H. relacionados con problemas de configuración insegura y otros problemas.

*sonarqube_snaps/snap3.png*

APARTADO 2
===========================

Sonarqube, anteriormente conocido como Sonar, es una herramienta de análisis de códgo fuente libre. Su funcionamiento se basa en el uso de múltiples métricas de análisis de código estático para determinar vulnerabilidades del códgio y mejorar la calidad del mismo. Adicionalmente, resulta un software muy práctico ya que facilita mecanismos de Integración Continua (CI/CD).

Estudiando las alternativas que ofrece el producto, existe una versión open source totalmente gratuita que incluye una serie de lenguajes para analizar, bien sea por defecto o gracias a extensiones gratuitas del mismo software: Java, JavaScript, C#, TypeScript, Kotlin, Ruby, Go, Scala, Flex, Python, PHP, HTML, CSS, XML y VB.NET. Esta opción nos permite cubrir una parte de los requerimientos del cliente, el código en Java. Sin embargo, para poder acceder al análisis de código estático de C, se requiere adquirir la versión "Developer" de Sonarqube. El equipo de análisis puede acceder a una prueba gratuita de 14 días gracias a que Sonarqube facilita claves de 14 días para hacer pruebas y comprobar si el usuario está satisfecho con el producto. No obstante, de cara al estudio de alternativas para el cliente es necesario remarcarlo, ya que en última instancia resulta en una inversión monetaria que debe ser estudiada por el cliente.