APARTADO 2
===========================

Introducción

Sonarqube, anteriormente conocido como Sonar, es una herramienta de análisis de códgo fuente libre. Su funcionamiento se basa en el uso de múltiples métricas de análisis de código estático para determinar vulnerabilidades del códgio y mejorar la calidad del mismo. Adicionalmente, resulta un software muy práctico ya que facilita mecanismos de Integración Continua (CI/CD).

Estudiando las alternativas que ofrece el producto, existe una versión open source totalmente gratuita que incluye una serie de lenguajes para analizar, bien sea por defecto o gracias a extensiones gratuitas del mismo software: Java, JavaScript, C#, TypeScript, Kotlin, Ruby, Go, Scala, Flex, Python, PHP, HTML, CSS, XML y VB.NET. Esta opción nos permite cubrir una parte de los requerimientos del cliente, el código en Java. Sin embargo, para poder acceder al análisis de código estático de C, se requiere adquirir la versión "Developer" de Sonarqube. De cara al estudio de alternativas para el cliente es necesario remarcarlo, ya que en última instancia resulta en una inversión monetaria que debe ser estudiada por el cliente.

Estudio del rendimiento de la herramienta

A la hora de estudiar el rendimiento de Sonarqube es necesario obtener una idea aproximada de una serie de parámetros: eficiencia (tiempo  necesario), eficacia (número de vulnerabilidades obtenidas), tasa de falsos positivos, usabilidad, y el informe de resultados obtenidos. 

Afortunadamente, un desarrollador del equipo de Sonarqube en su página de posts de comunidad redactó una entrada con muchos datos aclaradores acerca de varios de los parámetros que hemos listado previamente (eficacia, eficiencia y tasa de FP). El equipo explica que para las pruebas se utilizó el OWASP Benchmark (https://github.com/OWASP/Benchmark), un java test suite con más de 2740 casos de prueba designado para probar la velocidad y la efectividad de una herramienta de detección de vulnerabilidades. Para muchas entidades es considerado el standard para estudiar si una herramienta es digna de uso o no.
 
Los resultados que obtuvo la herramienta tras realizar el benchmark fue el siguiente:
- Puntuación del OWASP Benchmark: 84/100
- Tasa de Verdaderos Positivos (TPR): 85%
- Tasa de Falsos Positivos: 1%

Una descripción de como se computa la nota del benchmark es la siguiente:
TP - True-Positive 	Existe un problema y se detecta
FN - False-Negative Existe un problema y no se detecta
TN - True-Negative 	No se espera un problema y el programa no lo considera un problema
FP - False-Positive No se espera un problema y el programa sí lo considera un problema
TPR - True-Positive Rate 	(TPR) = TP / ( TP + FN )
FPR - False-Positive Rate 	(FPR) = FP / ( FP + TN )
OWASP Benchmark Score 	TPR - FPR

A nivel de eficiencia y rendimiento, las pruebas de este benchmark indican que, de media, con una máquina con un Intel Core i5 3570 con un reloj de 3.40 GHz y una memoria RAM total de 16 Gigabytes se debería de analizar todo el benchmark en aproximadamente 3 minutos, lo cual es un tiempo considerablemente pequeño para un proyecto que contiene 2740 casos de prueba con todo tipo de vulnerabilidades (Inyecciones SQL, Cross-Site Scripts, Inyecciones de Comandos, problemas de hashing o generadores de números aleatorios débiles entre otros ejemplos).

Para más información acerca del benchmark realizado, puede consultar el post original con sus correspondientes consideraciones aquí [https://community.sonarsource.com/t/takeaways-from-building-a-sast-product-and-why-owasp-benchmark-is-not-enough/15126].

Tratando la usabilidad, Sonarqube presenta un formato muy cómodo a nivel de interfaz. Solo en la versión community ya se puede obtener una idea aproximada de las funcionalidades del producto. Sonarqube se puede configurar para uso local como para uso en servidores, lo cual permite ajustarse al cliente en función de sus necesidades, teniendo además varias guías de instalación y una comunidad de soporte consistente. 
La interfaz guía al usuario a lo largo de la configuración de proyectos para que este no tenga problemas a la hora de realizar escáneres de seguridad, y en caso de que los tuviera, siempre facilita el acceso a su guía de uso, la cual se organiza en función del lenguaje y de las tecnologías asociadas a los mismos. Para más información al respecto de la guía de usuario, compruebe la documentación aquí [https://docs.sonarqube.org/latest/user-guide/concepts/].

Acerca del informe de resultados de la herramienta, se tiene evidencia gráfica de que los informes realizados por Sonarqube son detallados y extensos, apuntando a muchos detalles tanto a nivel de seguridad como a nivel de desarrollo de código (véase análisis CAI2). El informe de resultados de la herramienta incluye un desglose de los distintos problemas que presenta el código a nivel estructural y  las distintas vulnerabilidades del código a nivel de seguridad, pero adicionalmente la herramienta permite hacer una revisión del código a nivel gráfico (en el que se muestran los distintos fragmentos del código y su estado) y distintos gráficos sobre la evolución y evaluación del proyecto en los distintos ámbitos del mismo. Este nivel de detalle ya se puede conseguir desde la versión community del software, por lo que sepuede deducir que la profundidad técnica de la herramienta es notable y muy provechosa para un buen analista. Finalmente, Sonarqube facilita distintas gráficas mostrando el desarrollo del proyecto, los errores corregidos y otra información relevante sobre la proyección del mismo.

En conclusión, Sonarqube resulta una herramienta relativamente intuitiva de usar, con un diseño excelente, un rendimiento aceptable y un despliegue de información completo y desglosado. Su integracióin de CI-CD y software de control de versiones y gestión de proyectos lo hacen una herramienta más que adecuada para el análisis de código para muchas empresas y una solución más que aceptable para muchos casos de negocio. Lamentablemente, para poder desbloquear todas sus funcionalidades es necesario acceder a las versiones developer y enterprise del software, incurriendo necesariamente en un desembolso económico. Sin embargo, el equipo de análisis considera que esto puede considerarse una inversión positiva y productiva en el largo plazo, pues el ahorro de costes por solución de problemas técnicos y de seguridad es más que notable y en muchos casos puede suponer una producitvidad en el entorno de desarrollo muy elevada, lo que a la larga producirá más beneficios y compensará por completo el coste de la licencia del producto.